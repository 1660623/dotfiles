#!/usr/bin/env elixir

defmodule GitChurn do
  @doc """
  Calculates the number of times individual files have been changed on this branch.
  """

  def calculate do
    files_with_churn
    |> select_changed
    |> Enum.sort(fn({_, churn_a}, {_, churn_b}) -> churn_a > churn_b end)
    |> Enum.take(10)
    |> Enum.each(fn({path, churn}) ->
      IO.puts "#{String.rjust(Integer.to_string(churn), 4)}: #{path}"
    end)
  end

  @doc """
  Gets the files and the number of times they have been changed.
  """
  defp files_with_churn do
    git("log --all --name-only --format=format:")
    |> remove_blanks
    |> count_duplicates
  end

  @doc """
  Gets the list of files that have changed since `origin/master`.
  """
  defp changed_since_origin_master do
    git("log origin/master..HEAD --name-only --format=format:")
    |> remove_blanks
    |> Enum.uniq
  end

  @doc """
  Selects only the items in `files` that have changed since `origin/master`.
  """
  defp select_changed(files) do
    changed = changed_since_origin_master
    Enum.filter(files, fn({file, _}) -> file in changed end)
  end

  @doc """
  Transforms lists of the form `[[x, x, ...], [y, y, ...], ...]` into a list of tuples of the form
  `[{x, count_x}, {y, count_y}, ...]`.
  """
  defp count_chunks([]), do: []
  defp count_chunks([[value | rest] | tail]), do: [{value, length(rest) + 1}] ++ count_chunks(tail)

  @doc """
  Counts the occurrences of each value in a list and returns a list of `{value, count}` tuples.
  """
  defp count_duplicates(files) do
    Enum.sort(files)
    |> Enum.chunk_by(&(&1))
    |> count_chunks
  end

  @doc """
  Executes a Git command and returns a list of lines of output for parsing.
  """
  defp git(command) do
    {output, 0} = System.cmd("git", OptionParser.split(command))
    String.split(output, ~r{\n})
  end

  @doc """
  Removes all blank strings from the given list.
  """
  defp remove_blanks([]), do: []
  defp remove_blanks(["" | tail]), do: remove_blanks(tail)
  defp remove_blanks([head | tail]), do: [head] ++ remove_blanks(tail)
end

GitChurn.calculate
