#!/usr/bin/env ruby

require 'date'
require 'json'
require 'net/http'
require 'optparse'

def items(body)
  JSON.parse(body)
end

def page(url)
  if url =~ /page=(?<page>\d+)$/
    Regexp.last_match[:page]
  end
end

def parse_arguments(args)
  options = {}

  OptionParser.new do |opts|
    opts.on("-tTOKEN", "--token=TOKEN", "Access token") do |t|
      options[:token] = t
    end

    opts.on("-sSINCE", '--since=SINCE', "Only get issues since this date") do |s|
      options[:since] = s
    end

    opts.on("-v", "--verbose", "Verbose output") do |v|
      options[:verbose] = v
    end
  end.parse!(args)

  options
end

def parse_next(text)
  if text =~ /<(?<url>[^>]*)>; rel="next"/
    Regexp.last_match[:url]
  end
end

def request(path)
  Net::HTTP.start('api.github.com', use_ssl: true) { |http| http.get(path) }
end

def write_issues(body)
  issues = JSON.parse(body)
  issues.each do |issue|
    write_issue(issue)
  end
end

def issue_or_pr(issue)
  if issue['pull_request'].nil?
    'issue'
  else
    'pull_request'
  end
end

def write_issue(issue)
  id = issue['repository_url'].sub("https://api.github.com/repos/", "") + "##{issue['number']}"
  days_open = nil

  if issue['state'] == 'open'
    days_open = (DateTime.now - DateTime.parse(issue['created_at'])).to_i
  else
    days_open = (DateTime.parse(issue['closed_at']) - DateTime.parse(issue['created_at'])).to_i
  end

  fields = [id, issue_or_pr(issue), issue['state'], issue['created_at'], days_open, issue['closed_at']]
  puts fields.join(',')
end

options = parse_arguments(ARGV)

org = ARGV.first
url = "/orgs/#{org}/issues?per_page=100&filter=all&state=all"
url += "&access_token=#{options[:token]}" if options[:token]
url += "&since=#{options[:since]}" if options[:since]
resp = request(url)
write_issues(resp.body)

while resp["link"] do
  next_link = parse_next(resp["link"])
  break if next_link.nil?
  url = parse_next(resp["link"]).sub("https://api.github.com", "")
  $stderr.puts "Page #{page(url)}" if options[:verbose]
  $stderr.puts "Rate Limit Remaining = #{resp["x-ratelimit-remaining"]}" if options[:verbose]
  resp = request(url)
  write_issues(resp.body)
end
