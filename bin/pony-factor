#!/usr/bin/env elixir

require Logger

@@doc """
Interfaces with Git to extract needed information from the repository.
"""
defmodule Git do
  @commit_pattern ~r/(?<hash>[0-9a-f]+)\s+(?<date>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} [+-]\d{4})\s+(?<name>.+)/
  @doc """
  Clones the GitHub repository named by `[owner]/[repo]` into a temporary directory.

  Returns a tuple consisting of the path where the repository was cloned and the exit code of
  the clone operation.
  """
  def clone(nwo) do
    [_, repo] = Path.split(nwo)
    temp_dir = System.tmp_dir!
    target = Path.join(temp_dir, repo)
    url = create_url(nwo)

    Logger.info("Clone #{url} into #{target}")
    {_, exit_code} = System.cmd("git", ["clone", url, target])

    {target, exit_code}
  end

  @doc """
  Returns the list of commits as three-element tuples in the form
  `{sha, date_authored, author_name}` where:

  * `sha` is a String containing the shortened Git hash for the commit
  * `date_authored` is a String containing the
    [ISO8601-formatted](https://en.wikipedia.org/wiki/ISO_8601) date when the commit was authored
  * `author_name` is the display name of the author of the commit
  """
  def commit_list(target) do
    Logger.info("Get commit list")
    {output, 0} = System.cmd("git", ["log", "--format=%h %ai %an"], cd: target)
    split_commits(output)
  end

  defp create_url(nwo), do: "https://github.com/#{nwo}.git"

  defp split_commits(output) do
    output
    |> String.split("\n")
    |> Enum.map(fn(line) ->
         captures = Regex.named_captures(@commit_pattern, line)

         {captures["hash"], captures["date"], captures["name"]}
       end)
  end
end

@doc """
Calculates the [Pony Factor](https://ke4qqq.wordpress.com/2015/02/08/pony-factor-math/) of a GitHub
repository.
"""
defmodule PonyFactor do
  @commit_percentage 0.5

  @doc """
  Calculates the Pony Factor of the `location`.

  The `location` can either be a GitHub `owner/repo` name or a path to a local repository if the
  `:directory` option is specified. If a GitHub repository is specified, the repo will be cloned
  to the local filesystem for the calculations and then deleted afterward.

  It returns a list of two-element tuples of the form `{name, commit_count}` where:

  * `name` is the display name of the contributor
  * `commit_count` is the number of commits that person has contributed

  The list is sorted from most commits to least.

  You can get the length of the list to determine the Pony Factor number.

  ### Pony Factor

  The Pony Factor of a repository is the smallest number of contributors that, when totalling the
  number of commits for each contributor, equals 50% or more of the commits in the repository.

  This is a measure of the "health" of a project based on the idea that a higher number means:

  * More people understand the codebase, increasing resiliency in the face of long-term contributor
    turnover
  * More people contributing significantly means that the codebase is more approachable

  ### Options

  The following options are supported:

  * `:directory` - Set to `true` to supply the path to a local repository as the location
  """
  def calculate(location, options \\ [])

  def calculate(path, directory: true), do: calculate_from_local_repo(path)

  def calculate(nwo, _) do
    {clone_dir, 0} = Git.clone(nwo)

    pony_list = calculate_from_local_repo(clone_dir)

    File.rm_rf!(clone_dir)
    pony_list
  end

  defp calculate_from_local_repo(clone_dir) do
    commits = Git.commit_list(clone_dir)
    commit_count = Enum.count(commits)

    Logger.info("Calculate Pony Factor")
    commits
    |> reduce_committers
    |> sort_committers
    |> pony(commit_count)
  end

  defp max_date(a, b) when a > b, do: a
  defp max_date(_, b), do: b

  defp pony(committers, commit_count) do
    pony(0, [], committers, commit_count * @commit_percentage)
  end

  defp pony(sum, list, _, count) when sum >= count, do: Enum.reverse(list)
  defp pony(sum, list, [{name, _, author_count} | committers], count),
    do: pony(sum + author_count, [{name, author_count} | list], committers, count)

  defp reduce_committers(commits), do: reduce_committers(%{}, commits)

  defp reduce_committers(committers, []), do: committers
  defp reduce_committers(committers, [{_, date, name} | commits]) do
    {_, new_committers} = Map.get_and_update(committers, name, fn
                            nil                     -> {name, {name, date, 1}}
                            {_, commit_date, count} -> {name, {name, max_date(date, commit_date), count + 1}}
                          end)

    reduce_committers(new_committers, commits)
  end

  defp sort_committers(committers) do
    committers
    |> Map.values
    |> Enum.sort_by(fn({_, _, count}) -> count end, &>=/2)
  end
end

{options, [nwo | _]} = OptionParser.parse!(System.argv, strict: [directory: :boolean])
pony_list = PonyFactor.calculate(nwo, options)

Enum.each(pony_list, fn({name, count}) -> IO.puts("#{name}\t#{count}") end)

IO.puts(nil)
IO.puts("Pony Factor = #{Enum.count(pony_list)}")
