#!/usr/bin/env ruby
# rubocop:disable FileName

# Updates a GitHub forked project with the latest code from the original and pushes the updated code
# to the personal copy.
#
# Assumes that the original project is on a remote named `upstream` and the personal copy is on a
# remote named `origin`. It will only merge by fast-forward and will not push to the personal copy
# unless the fetch and merge was successful.

require 'optparse'

options = { upstream: 'upstream' }
parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{opts.program_name} [options]"

  opts.on('-u', '--upstream UPSTREAM', 'Name of upstream remote. Defaults to "upstream"') do |u|
    options[:upstream] = u
  end

  opts.on('-h', '--help', 'Displays this help message') do
    puts opts
    exit
  end
end

parser.parse(ARGV)

upstream = options[:upstream]

unless system("git remote | grep #{upstream}")
  puts "The upstream remote '#{upstream}' could not be found"
  exit 2
end

if `git current-branch` != 'master'
  puts 'Must be on the master branch to update the fork'
  exit 3
end

system("git pull --ff-only #{upstream} master && git push origin master")
