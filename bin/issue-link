#!/usr/bin/env ruby

require 'English'
require 'json'
require 'open-uri'
require 'optparse'
require 'ostruct'

def parse_github_issue(issue_link)
  case issue_link
  when /^((?<owner>[^\/]+)\/(?<repo>[^#]+)#)?(?<issue_number>\d+)$/
  when %r{^https://github.com/((?<owner>[^/]+)/(?<repo>[^/]+))/issues/(?<issue_number>\d+)$}
  else
    raise ArgumentError, "Unrecognized GitHub Issue format: #{issue_link}"
  end

  match = $LAST_MATCH_INFO
  [match['owner'] || 'atom', match['repo'] || 'atom', match['issue_number']]
end

title_only = false
parser = OptionParser.new do |opts|
  opts.banner = <<EOL
Creates a Markdown link to the given GitHub Issue after retrieving the Issue title.

The ISSUE can be either an atom/atom Issue number or a full GitHub Issue specification.

Usage: #{opts.program_name} [options] ISSUE
EOL

  opts.separator ""
  opts.separator "Specific options:"

  opts.on('-t', '--title-only', 'Only show the title of the issue in the link text') do
    title_only = true
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

parser.parse!(ARGV)
issue_link = ARGV[0]

owner, repo, issue_number = parse_github_issue(issue_link)
spec = "#{owner}/#{repo}\##{issue_number}"
api_uri = "https://api.github.com/repos/#{owner}/#{repo}/issues/#{issue_number}"
web_uri = "https://github.com/#{owner}/#{repo}/issues/#{issue_number}"

issue = OpenStruct.new(JSON.parse(open(api_uri).read))

if title_only
  puts "[#{issue.title}](#{web_uri})"
else
  puts "[#{spec} - #{issue.title}](#{web_uri})"
end
