#!/usr/bin/env ruby
# rubocop:disable FileName

# Downloads all matching files in an S3 bucket.

require 'aws-sdk'
require 'fileutils'
require 'logger'
require 'powerpack'
require 'ruby-progressbar'
require 'trollop'
require 'yaml'

# @return [String] Banner for the help message.
def create_help_banner
  banner = <<-EOS
    Downloads all matching files in an S3 bucket.

    Usage:
        s3-download [options] <bucket name> [mask]

    where [options] are:
  EOS

  banner.strip_indent
end

# @return [Logger] Default logger.
def create_logger
  logger = Logger.new(STDOUT)
  logger.level = Logger::WARN
  logger
end

# Parses the command-line options.
#
# @return [Hash] Command-line options parsed representation.
def parse_options
  Trollop.options do
    banner create_help_banner

    opt :config,
        'Path to YAML file containing the AWS configuration',
        type: :string,
        default: "#{ENV['HOME']}/.aws/config"

    opt :debug, 'Outputs debug logging'
    opt :verbose, 'Outputs verbose logging'
  end
end

logger = create_logger
opts = parse_options

Trollop.die 'Must specify a bucket name' if ARGV[0].nil?

unless File.exist?(opts[:config])
  Trollop.die :config, "Could not find configuration: #{opts[:config]}"
end

logger.level = Logger::INFO if opts[:verbose]
logger.level = Logger::DEBUG if opts[:debug]

bucket_name = ARGV[0]
mask = ARGV[1] || '*'

logger.debug("Command-line options: #{opts.inspect}")
logger.debug("Command-line arguments: #{ARGV.inspect}")

config = YAML.load_file(opts[:config])
logger.debug("Configuration: #{config.inspect}")

aws_config = AWS.config(config)
logger.debug("AWS Configuration: #{aws_config.inspect}")

# Get the bucket information
s3 = AWS::S3.new
bucket = s3.buckets[bucket_name]

total_bar = ProgressBar.create(title: 'Total', total: bucket.objects.count, format: '%t: |%B| %E')

# Download each matching object
bucket.objects.each do |object|
  total_bar.increment
  total_bar.log(object.key) if opts[:verbose] || opts[:debug]
  next unless File.fnmatch?(mask, object.key)
  next if object.key.end_with?('/')

  FileUtils.mkdir_p(File.dirname(object.key))
  File.open(object.key, 'wb') do |file|
    bucket.objects[object.key].read do |chunk|
      file.write(chunk)
    end
  end
end

total_bar.finish
