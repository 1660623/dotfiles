'.source.js':
  Babel:
    prefix: 'bab'
    body: "/** @babel */"
  Etch:
    prefix: 'etch'
    body: """
    /** @jsx etch.dom */

    import etch from 'etch'

    export default class $1 {
      constructor ($0) {
        etch.initialize(this)
      }

      render () {
        return <div></div>
      }

      update () {
        return etch.update(this)
      }

      destroy () {
        etch.destroy(this)
      }
    }
    """
  Describe:
    prefix: 'desc'
    body: """
    describe('$1', function () {
      $0
    })
    """
  AsyncDescribe:
    prefix: 'desca'
    body: """
    describe('$1', async function () {
      $0
    })
    """
  AfterEach:
    prefix: 'afe'
    body: """
    afterEach(function () {
      $0
    })
    """
  BeforeEach:
    prefix: 'befe'
    body: """
    beforeEach(function () {
      $0
    })
    """
  AsyncIt:
    prefix: 'ita'
    body: """
    it('$1', async function () {
      $0
    })
    """
  It:
    prefix: 'it'
    body: """
    it('$1', function () {
      $0
    })
    """
  Expect:
    prefix: 'ex'
    body: "expect($1).to"
  ExpectEqual:
    prefix: 'exeq'
    body: "expect($1).to.equal($2)"
  SemicolonDescribe:
    prefix: 'sdesc'
    body: """
    describe('$1', function () {
      $0
    });
    """
  SemicolonAsyncDescribe:
    prefix: 'sdesca'
    body: """
    describe('$1', async function () {
      $0
    });
    """
  SemicolonAfterEach:
    prefix: 'safe'
    body: """
    afterEach(function () {
      $0
    });
    """
  SemicolonBeforeEach:
    prefix: 'sbefe'
    body: """
    beforeEach(function () {
      $0
    });
    """
  SemicolonAsyncIt:
    prefix: 'sita'
    body: """
    it('$1', async function () {
      $0
    });
    """
  SemicolonIt:
    prefix: 'sit'
    body: """
    it('$1', function () {
      $0
    });
    """
'.source.coffee':
  Describe:
    prefix: 'desc'
    body: "describe '$1', ->$0"
  It:
    prefix: 'it'
    body: "it '$1', ->$0"
'.source.gfm':
  README:
    prefix: 'readme'
    body: """
      # Project Name

      ## Installation

      ## Use

      ## Configuration

      ## Copyright

    """
  'Image Link':
    'prefix': 'img'
    'body': '![$1]($2 "$1")'
  Planet:
    # Used in my No Man's Sky notes repo
    prefix: 'planet'
    body: """
    ## ${1:Planet Name}

    * Weather: ${2:Weather Type}
    * Sentinels: ${3:Sentinel Activity}
    * Flora: ${4:Flora Level}
    * Fauna: ${5:Fauna Level}

    * Resources Found (besides Carbon and Iron)
    """
'.source.java':
  'private static final':
    prefix: 'psf'
    body: 'private static final'
  'private static final String':
    prefix: 'psfs'
    body: 'private static final String'
  'JUnit Test':
    prefix: 'test'
    body: """
    @Test
    public void ${1:testName}() {$0\n}
    """
  'JUnit Test with Expected Exception':
    prefix: 'testex'
    body: """
    @Test(expected=${1:Exception}.class)
    public void ${2:throwsOnSomething}() {$0\n}
    """
  'JUnit Before':
    prefix: 'bef'
    body: """
    @Before
    public void setUp() {$0\n}
    """
  'Assert':
    prefix: 'ass'
    body: "assertThat(${1:expected}, ${2:actual});$0"
'.source.elixir':
  Context:
    prefix: 'con'
    body: 'context "$1" do$0\nend'
  Describe:
    prefix: 'desc'
    body: 'describe "$1" do$0\nend'
  It:
    prefix: 'it'
    body: 'it "$1" do$0\nend'
  'It One-Line':
    prefix: 'itd'
    body: 'it "$1", do: $0'
  Let:
    prefix: 'let'
    body: 'let :$1 do$0\nend'
  'Let One-Line':
    prefix: 'letd'
    body: 'let :$1, do: $0'
  '@typedoc':
    prefix: 'tdoc'
    body: '''
      @typedoc """
      $0
      """
    '''
  'No Doc':
    prefix: 'nodoc'
    body: '@doc false'
  'Expect Exception':
    prefix: 'exex'
    body: 'expect fn -> ${1:body} end |> to(raise_exception ${2:Error})'
'.source.ruby':
  Before:
    prefix: 'bef'
    body: 'before { $0 }'
  'Before - Do':
    prefix: 'befd'
    body: "before do$0\nend"
  Describe:
    prefix: 'desc'
    body: "describe $1 do$0\nend"
  'FactoryGirl Build':
    prefix: 'fgb'
    body: 'FactoryGirl.build($1)$0'
  'FactoryGirl Build Stubbed':
    prefix: 'fgbs'
    body: 'FactoryGirl.build_stubbed($1)$0'
  'FactoryGirl Create':
    prefix: 'fgc'
    body: 'FactoryGirl.create($1)$0'
  It:
    prefix: 'it'
    body: 'it { $0 }'
  Its:
    prefix: 'its'
    body: 'its($1) { $0 }'
  'It do':
    prefix: 'itd'
    body: "it '$1' do\n$0\nend"
  Let:
    prefix: 'let'
    body: 'let($1) { $0 }'
  'Subject - Named':
    prefix: 'subjn'
    body: 'subject($1) { $0 }'
  Subject:
    prefix: 'subj'
    body: 'subject { $0 }'
'.text.elixir':
  Octicon:
    prefix: 'oct'
    body: '<%= octicon($1) %>'
